// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dilikeo.repository;

import com.dilikeo.domain.Cliente;
import com.dilikeo.domain.QCliente;
import com.dilikeo.repository.ClienteRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ClienteRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ClienteRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.NOMBRE = "nombre";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.TELEFONO = "telefono";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.DIRECCION = "direccion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.FECHA___DE___REGISTRO___EN___SISTEMA = "fecha_de_registro_en_sistema";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.CORREO = "correo";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cliente> ClienteRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCliente cliente = QCliente.cliente;
        
        JPQLQuery<Cliente> query = from(cliente);
        
        Path<?>[] paths = new Path<?>[] {cliente.nombre,cliente.telefono,cliente.direccion,cliente.fecha_de_registro_en_sistema,cliente.correo};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, cliente.nombre)
			.map(TELEFONO, cliente.telefono)
			.map(DIRECCION, cliente.direccion)
			.map(FECHA___DE___REGISTRO___EN___SISTEMA, cliente.fecha_de_registro_en_sistema)
			.map(CORREO, cliente.correo);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cliente);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cliente> ClienteRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QCliente cliente = QCliente.cliente;
        
        JPQLQuery<Cliente> query = from(cliente);
        
        Path<?>[] paths = new Path<?>[] {cliente.nombre,cliente.telefono,cliente.direccion,cliente.fecha_de_registro_en_sistema,cliente.correo};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(cliente.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, cliente.nombre)
			.map(TELEFONO, cliente.telefono)
			.map(DIRECCION, cliente.direccion)
			.map(FECHA___DE___REGISTRO___EN___SISTEMA, cliente.fecha_de_registro_en_sistema)
			.map(CORREO, cliente.correo);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cliente);
    }
    
}
