// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dilikeo.repository;

import com.dilikeo.domain.QVenta;
import com.dilikeo.domain.Venta;
import com.dilikeo.repository.VentaRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect VentaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: VentaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VentaRepositoryImpl.PRODUCTO = "producto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VentaRepositoryImpl.ID___CLIENTE = "id_cliente";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VentaRepositoryImpl.CANTIDAD = "cantidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VentaRepositoryImpl.GARANTIA = "garantia";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VentaRepositoryImpl.VENDEDOR = "vendedor";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venta> VentaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QVenta venta = QVenta.venta;
        
        JPQLQuery<Venta> query = from(venta);
        
        Path<?>[] paths = new Path<?>[] {venta.producto,venta.id_cliente,venta.cantidad,venta.garantia,venta.vendedor};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCTO, venta.producto)
			.map(ID___CLIENTE, venta.id_cliente)
			.map(CANTIDAD, venta.cantidad)
			.map(GARANTIA, venta.garantia)
			.map(VENDEDOR, venta.vendedor);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, venta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venta> VentaRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QVenta venta = QVenta.venta;
        
        JPQLQuery<Venta> query = from(venta);
        
        Path<?>[] paths = new Path<?>[] {venta.producto,venta.id_cliente,venta.cantidad,venta.garantia,venta.vendedor};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(venta.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCTO, venta.producto)
			.map(ID___CLIENTE, venta.id_cliente)
			.map(CANTIDAD, venta.cantidad)
			.map(GARANTIA, venta.garantia)
			.map(VENDEDOR, venta.vendedor);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, venta);
    }
    
}
