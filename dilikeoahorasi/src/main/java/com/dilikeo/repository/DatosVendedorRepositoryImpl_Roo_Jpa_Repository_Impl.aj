// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dilikeo.repository;

import com.dilikeo.domain.DatosVendedor;
import com.dilikeo.domain.QDatosVendedor;
import com.dilikeo.repository.DatosVendedorRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DatosVendedorRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DatosVendedorRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.VENDEDOREXISTENTE = "vendedorexistente";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.TELEFONO = "telefono";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.CORREO = "correo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.CEDULA = "cedula";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.DIRECCION = "direccion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DatosVendedorRepositoryImpl.EPS = "EPS";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DatosVendedor> DatosVendedorRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDatosVendedor datosVendedor = QDatosVendedor.datosVendedor;
        
        JPQLQuery<DatosVendedor> query = from(datosVendedor);
        
        Path<?>[] paths = new Path<?>[] {datosVendedor.vendedorexistente,datosVendedor.telefono,datosVendedor.correo,datosVendedor.cedula,datosVendedor.direccion,datosVendedor.EPS};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(VENDEDOREXISTENTE, datosVendedor.vendedorexistente)
			.map(TELEFONO, datosVendedor.telefono)
			.map(CORREO, datosVendedor.correo)
			.map(CEDULA, datosVendedor.cedula)
			.map(DIRECCION, datosVendedor.direccion)
			.map(EPS, datosVendedor.EPS);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, datosVendedor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DatosVendedor> DatosVendedorRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDatosVendedor datosVendedor = QDatosVendedor.datosVendedor;
        
        JPQLQuery<DatosVendedor> query = from(datosVendedor);
        
        Path<?>[] paths = new Path<?>[] {datosVendedor.vendedorexistente,datosVendedor.telefono,datosVendedor.correo,datosVendedor.cedula,datosVendedor.direccion,datosVendedor.EPS};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(datosVendedor.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(VENDEDOREXISTENTE, datosVendedor.vendedorexistente)
			.map(TELEFONO, datosVendedor.telefono)
			.map(CORREO, datosVendedor.correo)
			.map(CEDULA, datosVendedor.cedula)
			.map(DIRECCION, datosVendedor.direccion)
			.map(EPS, datosVendedor.EPS);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, datosVendedor);
    }
    
}
