// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dilikeo.repository;

import com.dilikeo.domain.Devoluciones;
import com.dilikeo.domain.QDevoluciones;
import com.dilikeo.repository.DevolucionesRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DevolucionesRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DevolucionesRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.ID___CLIENTE = "id_cliente";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.PRODUCTO = "producto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.CANTIDAD = "cantidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.COMENTARIO = "Comentario";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.DINERODEVUELTO = "dinerodevuelto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.FECHADEVOLUCION = "fechadevolucion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevolucionesRepositoryImpl.QUIEN___HACE___DEVOLUCION = "quien_hace_devolucion";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Devoluciones> DevolucionesRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDevoluciones devoluciones = QDevoluciones.devoluciones;
        
        JPQLQuery<Devoluciones> query = from(devoluciones);
        
        Path<?>[] paths = new Path<?>[] {devoluciones.id_cliente,devoluciones.producto,devoluciones.cantidad,devoluciones.Comentario,devoluciones.dinerodevuelto,devoluciones.fechadevolucion,devoluciones.quien_hace_devolucion};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID___CLIENTE, devoluciones.id_cliente)
			.map(PRODUCTO, devoluciones.producto)
			.map(CANTIDAD, devoluciones.cantidad)
			.map(COMENTARIO, devoluciones.Comentario)
			.map(DINERODEVUELTO, devoluciones.dinerodevuelto)
			.map(FECHADEVOLUCION, devoluciones.fechadevolucion)
			.map(QUIEN___HACE___DEVOLUCION, devoluciones.quien_hace_devolucion);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, devoluciones);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Devoluciones> DevolucionesRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDevoluciones devoluciones = QDevoluciones.devoluciones;
        
        JPQLQuery<Devoluciones> query = from(devoluciones);
        
        Path<?>[] paths = new Path<?>[] {devoluciones.id_cliente,devoluciones.producto,devoluciones.cantidad,devoluciones.Comentario,devoluciones.dinerodevuelto,devoluciones.fechadevolucion,devoluciones.quien_hace_devolucion};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(devoluciones.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID___CLIENTE, devoluciones.id_cliente)
			.map(PRODUCTO, devoluciones.producto)
			.map(CANTIDAD, devoluciones.cantidad)
			.map(COMENTARIO, devoluciones.Comentario)
			.map(DINERODEVUELTO, devoluciones.dinerodevuelto)
			.map(FECHADEVOLUCION, devoluciones.fechadevolucion)
			.map(QUIEN___HACE___DEVOLUCION, devoluciones.quien_hace_devolucion);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, devoluciones);
    }
    
}
