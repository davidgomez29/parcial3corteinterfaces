// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dilikeo.web;

import com.dilikeo.domain.DatosVendedor;
import com.dilikeo.domain.Vendedor;
import com.dilikeo.service.api.DatosVendedorService;
import com.dilikeo.web.DatosVendedorsCollectionThymeleafController;
import com.dilikeo.web.DatosVendedorsItemThymeleafController;
import com.dilikeo.web.DatosVendedorsItemThymeleafLinkFactory;
import io.springlets.data.web.validation.GenericValidator;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import io.springlets.web.mvc.util.concurrency.ConcurrencyCallback;
import io.springlets.web.mvc.util.concurrency.ConcurrencyManager;
import io.springlets.web.mvc.util.concurrency.ConcurrencyTemplate;
import java.util.Arrays;
import java.util.Locale;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect DatosVendedorsItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: DatosVendedorsItemThymeleafController: @Controller;
    
    declare @type: DatosVendedorsItemThymeleafController: @RequestMapping(value = "/datosvendedors/{datosVendedor}", name = "DatosVendedorsItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DatosVendedorService DatosVendedorsItemThymeleafController.datosVendedorService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource DatosVendedorsItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DatosVendedorsItemThymeleafController> DatosVendedorsItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DatosVendedorsCollectionThymeleafController> DatosVendedorsItemThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private final ConcurrencyTemplate<DatosVendedor> DatosVendedorsItemThymeleafController.concurrencyTemplate = new ConcurrencyTemplate<DatosVendedor>(this);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param datosVendedorService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public DatosVendedorsItemThymeleafController.new(DatosVendedorService datosVendedorService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setDatosVendedorService(datosVendedorService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(DatosVendedorsItemThymeleafController.class));
        setCollectionLink(linkBuilder.of(DatosVendedorsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DatosVendedorService
     */
    public DatosVendedorService DatosVendedorsItemThymeleafController.getDatosVendedorService() {
        return datosVendedorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedorService
     */
    public void DatosVendedorsItemThymeleafController.setDatosVendedorService(DatosVendedorService datosVendedorService) {
        this.datosVendedorService = datosVendedorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource DatosVendedorsItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void DatosVendedorsItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DatosVendedorsItemThymeleafController> DatosVendedorsItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void DatosVendedorsItemThymeleafController.setItemLink(MethodLinkBuilderFactory<DatosVendedorsItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DatosVendedorsCollectionThymeleafController> DatosVendedorsItemThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void DatosVendedorsItemThymeleafController.setCollectionLink(MethodLinkBuilderFactory<DatosVendedorsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return DatosVendedor
     */
    @ModelAttribute
    public DatosVendedor DatosVendedorsItemThymeleafController.getDatosVendedor(@PathVariable("datosVendedor") Long id, Locale locale, HttpMethod method) {
        DatosVendedor datosVendedor = null;
        if (HttpMethod.PUT.equals(method)) {
            datosVendedor = datosVendedorService.findOneForUpdate(id);
        } else {
            datosVendedor = datosVendedorService.findOne(id);
        }
        
        if (datosVendedor == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"DatosVendedor", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return datosVendedor;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedor
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView DatosVendedorsItemThymeleafController.show(@ModelAttribute DatosVendedor datosVendedor, Model model) {
        model.addAttribute("datosVendedor", datosVendedor);
        return new ModelAndView("datosvendedors/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedor
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView DatosVendedorsItemThymeleafController.showInline(@ModelAttribute DatosVendedor datosVendedor, Model model) {
        model.addAttribute("datosVendedor", datosVendedor);
        return new ModelAndView("datosvendedors/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DatosVendedorsItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DatosVendedorsItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
        model.addAttribute("vendedorexistente", Arrays.asList(Vendedor.values()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConcurrencyTemplate
     */
    public ConcurrencyTemplate<DatosVendedor> DatosVendedorsItemThymeleafController.getConcurrencyTemplate() {
        return concurrencyTemplate;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String DatosVendedorsItemThymeleafController.getModelName() {
        return "datosVendedor";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String DatosVendedorsItemThymeleafController.getEditViewPath() {
        return "datosvendedors/edit";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param record
     * @return Integer
     */
    public Integer DatosVendedorsItemThymeleafController.getLastVersion(DatosVendedor record) {
        return getDatosVendedorService().findOne(record.getId()).getVersion();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @param model
     * @return ModelAndView
     */
    public ModelAndView DatosVendedorsItemThymeleafController.populateAndGetFormView(DatosVendedor entity, Model model) {
        // Populate the form with all the necessary elements
        populateForm(model);
        // Add concurrency attribute to the model to show the concurrency form
        // in the current edit view
        model.addAttribute("concurrency", true);
        // Add the new version value to the model.
        model.addAttribute("newVersion", getLastVersion(entity));
        // Add the current pet values to maintain the values introduced by the user
        model.addAttribute(getModelName(), entity);
        // Return the edit view path
        return new org.springframework.web.servlet.ModelAndView(getEditViewPath(), model.asMap());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param binder
     */
    @InitBinder("datosVendedor")
    public void DatosVendedorsItemThymeleafController.initDatosVendedorBinder(WebDataBinder binder) {
        binder.setDisallowedFields("id");
        // Register validators
        GenericValidator validator = new GenericValidator(DatosVendedor.class, getDatosVendedorService());
        binder.addValidators(validator);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedor
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView DatosVendedorsItemThymeleafController.editForm(@ModelAttribute DatosVendedor datosVendedor, Model model) {
        populateForm(model);
        
        model.addAttribute("datosVendedor", datosVendedor);
        return new ModelAndView("datosvendedors/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedor
     * @param result
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView DatosVendedorsItemThymeleafController.update(@Valid @ModelAttribute DatosVendedor datosVendedor, BindingResult result, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            return new ModelAndView(getEditViewPath());
        }
        // Create Concurrency Spring Template to ensure that the following code will manage the
        // possible concurrency exceptions that appears and execute the provided coded inside the Spring template.
        // If some concurrency exception appears the template will manage it.
        DatosVendedor savedDatosVendedor = getConcurrencyTemplate().execute(datosVendedor, model, new ConcurrencyCallback<DatosVendedor>() {
            @Override
            public DatosVendedor doInConcurrency(DatosVendedor datosVendedor) throws Exception {
                return getDatosVendedorService().save(datosVendedor);
            }
        });
        UriComponents showURI = getItemLink().to(DatosVendedorsItemThymeleafLinkFactory.SHOW).with("datosVendedor", savedDatosVendedor.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param datosVendedor
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> DatosVendedorsItemThymeleafController.delete(@ModelAttribute DatosVendedor datosVendedor) {
        getDatosVendedorService().delete(datosVendedor);
        return ResponseEntity.ok().build();
    }
    
}
